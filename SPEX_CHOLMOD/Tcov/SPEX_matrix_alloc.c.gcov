        -:    0:Source:SPEX_matrix_alloc.c
        -:    0:Graph:SPEX_matrix_alloc.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    1://------------------------------------------------------------------------------
        -:    2:// SPEX_CHOLMOD/SPEX_matrix_alloc.c: create and initialize a matrix with given
        -:    3:// size n and m.
        -:    4://------------------------------------------------------------------------------
        -:    5:
        -:    6:// SPEX_CHOLMOD: (c) 2020-2021, Jinhao Chen, Timothy A. Davis, Erick
        -:    7:// Moreno-Centeno, Texas A&M University.  All Rights Reserved.  See
        -:    8:// SPEX_CHOLMOD/License for the license.
        -:    9:
        -:   10://------------------------------------------------------------------------------
        -:   11:
        -:   12:// Purpose: This function is called to create and initialize a matrix with
        -:   13:// given number of vectors n, and number of max entries in each vector m.
        -:   14:// namax in each vector is initialized as 0, and thus further reallocation
        -:   15:// using SPEX_vector_realloc is needed before assigning value to any entries.
        -:   16:// scale will be set to be 1 as default.
        -:   17:
        -:   18:#define SPEX_FREE_ALL       \
        -:   19:    SPEX_matrix_free(&A);
        -:   20:
        -:   21:#include "spex_internal.h"
        -:   22:
    #####:   23:SPEX_info SPEX_matrix_alloc
        -:   24:(
        -:   25:    SPEX_matrix **A_handle,      // matrix to be allocated
        -:   26:    const int64_t n,             // number of vectors
        -:   27:    const int64_t m              // number of max entries in each vector
        -:   28:)
        -:   29:{
        -:   30:    SPEX_info info ;
    #####:   31:    if (!spex_initialized ( )) return (SPEX_PANIC) ;
    #####:   32:    if (A_handle == NULL || n < 0 || m < 0)
        -:   33:    {
    #####:   34:        return SPEX_INCORRECT_INPUT;
        -:   35:    }
    #####:   36:    *A_handle = NULL;
        -:   37:
    #####:   38:    if (n == 0) { return SPEX_OK; }
        -:   39:
    #####:   40:    SPEX_matrix *A = (SPEX_matrix*) SPEX_malloc(sizeof(SPEX_matrix));
    #####:   41:    if (!A)
        -:   42:    {
    #####:   43:        return SPEX_OUT_OF_MEMORY;
        -:   44:    }
    #####:   45:    A->m = m;
    #####:   46:    A->n = n;
    #####:   47:    SPEX_MPQ_SET_NULL(A->scale);
        -:   48:
        -:   49:    // make sure each A->v[] is initialized as NULL
    #####:   50:    A->v = (SPEX_vector**) SPEX_calloc(n, sizeof(SPEX_vector*));
    #####:   51:    if (!(A->v))
        -:   52:    {
    #####:   53:        SPEX_FREE(A);
    #####:   54:        return SPEX_OUT_OF_MEMORY;
        -:   55:    }
        -:   56:    
    #####:   57:    for (int64_t i = 0; i < n; i++)
        -:   58:    {
    #####:   59:        SPEX_CHECK(SPEX_vector_alloc(&(A->v[i]), 0));
        -:   60:    }
    #####:   61:    SPEX_CHECK(SPEX_mpq_init(A->scale));
    #####:   62:    SPEX_CHECK(SPEX_mpq_set_ui(A->scale, 1, 1));
        -:   63:
    #####:   64:    *A_handle = A;
        -:   65:
    #####:   66:    return SPEX_OK;
        -:   67:}
        -:   68:
