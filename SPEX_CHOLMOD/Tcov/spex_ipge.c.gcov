        -:    0:Source:spex_ipge.c
        -:    0:Graph:spex_ipge.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    1://------------------------------------------------------------------------------
        -:    2://SPEX_CHOLMOD/spex_ipge.c: perform one iteration of IPGE with effort to skip
        -:    3://                          possible scaling process.
        -:    4://------------------------------------------------------------------------------
        -:    5:
        -:    6:// SPEX_CHOLMOD: (c) 2020-2021, Jinhao Chen, Timothy A. Davis, Erick
        -:    7:// Moreno-Centeno, Texas A&M University.  All Rights Reserved.  See
        -:    8:// SPEX_CHOLMOD/License for the license.
        -:    9:
        -:   10://------------------------------------------------------------------------------
        -:   11:
        -:   12:// Purpose: This function is to perform one iteration of IPGE when the
        -:   13:// involving vectors have pending scale factors that are wished not to be
        -:   14:// applied. In addition, this function should be used in successive IPGE
        -:   15:// update, where history update could be involved for certain entry. Therefore,
        -:   16:// a history vector is required as a input/output. In case of a single IPGE
        -:   17:// iteration with no need for history update, this function should not be used.
        -:   18:// This function is called by the following three functions:
        -:   19:// spex_dppu2: successive IPGE update for row k of U after swapping with row
        -:   20://             ks of U.
        -:   21:// spex_cppu: compute the (n-1)-th IPGE update of column k after vk is inserted.
        -:   22:// spex_solve_and_insert: the REF triangular solve for LDx=v when L and v are
        -:   23://             sparse.
        -:   24:// spex_forward_sub: the forward substitution when solving LDUx=b, which is
        -:   25://             essensially REF triangular solve for LDx=b when b is dense.
        -:   26://
        -:   27:// Algorithm explanation:
        -:   28:// Consider when performing the j-th IPGE update for x[i], and the j-th pivot
        -:   29:// is sd[j] and the j-th vector (row/column) is v. When all entries in v have
        -:   30:// no pending scale factor, v(perm[j])=sd[j], and we can perform IPGE for x[i]
        -:   31:// as
        -:   32:// x[i] = (x[i]*sd[j]-v[i]*x[perm[j]])/sd[j-1].
        -:   33:// In order to skip scaling for v when its pending scaling factor v_scale != 1,
        -:   34:// we can compute x[i] as
        -:   35:// x[i] = (x[i]*v[perm[j]]-v[i]*x[perm[j]])/sd[j-1],
        -:   36:// since v(perm[j])*v_scale=sd[j]. When the update finished, the pending scale
        -:   37:// for x(perm(j+1:n)) needs to multiply with v_scale.
        -:   38://
        -:   39:// In addition, in case of history update is needed before the IPGE update for
        -:   40:// x[i] and/or x[perm[j]], the equation becomes
        -:   41:// x[i] = x[i]*v[perm[j]]/sd[h[i]]- v(i)*x[perm[j]])/sd[h[perm[j]]].
        -:   42://
        -:   43:// When the IPGE update finished, all entries x[perm[1:j]] will be scaled such
        -:   44:// that the pending scaling factors become 1, while x[perm[j+1:n]] has common
        -:   45:// factor x_scale=x_scale*v_scale.
        -:   46:
        -:   47:
        -:   48:#define SPEX_FREE_ALL                \
        -:   49:    SPEX_MPQ_CLEAR(pending_scale);   \
        -:   50:    SPEX_MPZ_CLEAR(tmpz);
        -:   51:
        -:   52:#include "spex_internal.h"
        -:   53:
    #####:   54:SPEX_info spex_ipge // perform IPGE on x based on v
        -:   55:(
        -:   56:    spex_scattered_vector *sv_x,// array of size n for x in the scattered form.
        -:   57:                    // x could be dense by setting sv_x->i = NULL.
        -:   58:    mpq_t x_scale,  // pending scale for x
        -:   59:    int64_t *h,     // history vector for x, x[i] was last updated in the
        -:   60:                    // SPEX_FLIP(h[i])-th iteration
        -:   61:    int64_t *prev,  // prev is the index of the found previous entry of the last
        -:   62:                    // one (i.e., 2nd last entry) in v(perm). update if !prev
        -:   63:    const SPEX_vector *v,// the vector that contains the j-th pivot used to
        -:   64:                    // compute x in the j-th IPGE iteration
        -:   65:    const int64_t *perm, // permutation
        -:   66:    const int64_t *perm_inv, // inverse of permutation
        -:   67:    const mpz_t *sd,// array of scaled pivots
        -:   68:    const mpq_t v_scale1, // the first pending scale for v
        -:   69:    const mpq_t v_scale2, // the second pending scale for v
        -:   70:    const int64_t diag_j,// x[diag_j] is the entry in v with index perm[j]
        -:   71:    const int64_t j
        -:   72:)
        -:   73:{
        -:   74:    SPEX_info info;
    #####:   75:    if (!sv_x || !h || !perm || !perm_inv || !v || !sd)
        -:   76:    {
    #####:   77:        return SPEX_INCORRECT_INPUT;
        -:   78:    }
        -:   79:    int64_t p, i, real_hj, real_hi;
        -:   80:    int sgn;
    #####:   81:    mpq_t pending_scale; SPEX_MPQ_SET_NULL(pending_scale);// TODO make input
    #####:   82:    mpz_t tmpz; SPEX_MPZ_SET_NULL(tmpz);
    #####:   83:    SPEX_CHECK(SPEX_mpq_init(pending_scale));
    #####:   84:    SPEX_CHECK(SPEX_mpz_init(tmpz));
        -:   85:
        -:   86:    // pending_scale = x[perm[j]]/sd[h[perm[j]]]
    #####:   87:    real_hj = SPEX_FLIP(h[perm[j]]);
    #####:   88:    SPEX_CHECK(SPEX_mpq_set_z(pending_scale, sv_x->x[perm[j]]));
    #####:   89:    if (real_hj > -1)
        -:   90:    {
    #####:   91:        SPEX_CHECK(SPEX_mpq_set_den(pending_scale, sd[real_hj]));
    #####:   92:        SPEX_CHECK(SPEX_mpq_canonicalize(pending_scale));
        -:   93:    }
        -:   94:    // NOTE: this could cause fillin in x 
    #####:   95:    for (p = 0; p < v->nz; p++)
        -:   96:    {
        -:   97:        // exclude v(perm[j])
    #####:   98:        if (p == diag_j) // same as (i == perm[j])
        -:   99:        {
    #####:  100:            continue;
        -:  101:        }
    #####:  102:        SPEX_CHECK(SPEX_mpz_sgn(&sgn, v->x[p]));
    #####:  103:        if (sgn == 0)    // v[i] == 0
        -:  104:        {
    #####:  105:            continue;
        -:  106:        }
        -:  107:        // column/row index in v
    #####:  108:        i = v->i[p];
    #####:  109:        real_hi = SPEX_FLIP(h[i]);
        -:  110:
        -:  111:        // x[i] = floor(x[i]*v[perm[j]]/sd[h[i]])
    #####:  112:        SPEX_CHECK(SPEX_mpz_sgn(&sgn, sv_x->x[i]));
    #####:  113:        if (sgn != 0)    // x[i] != 0
        -:  114:        {
        -:  115:            // x[i] = x[i]*v[perm[j]]
    #####:  116:            SPEX_CHECK(SPEX_mpz_mul(sv_x->x[i], sv_x->x[i], v->x[diag_j]));
    #####:  117:            if (real_hi != real_hj && real_hi > -1)
        -:  118:            {
    #####:  119:                SPEX_CHECK(SPEX_mpz_fdiv_q(sv_x->x[i], sv_x->x[i],sd[real_hi]));
        -:  120:            }
        -:  121:        }
    #####:  122:        else if (sv_x->i != NULL && h[i] >= -1)
        -:  123:        {
        -:  124:            // this entry was not in nnz pattern, so we add it to nnz pattern
    #####:  125:            sv_x->i[sv_x->nz] = i;
    #####:  126:            sv_x->nz ++;
        -:  127:
        -:  128:            // update prev if needed
    #####:  129:            if (prev && perm_inv[i] > *prev && perm_inv[i] != sv_x->nzmax-1)
        -:  130:            {
    #####:  131:                *prev = perm_inv[i];
        -:  132:            }
        -:  133:        }
    #####:  134:        if (real_hi != real_hj)
        -:  135:        {
        -:  136:            // tmpz = floor(v(i)*pending_scale)
    #####:  137:            SPEX_CHECK(SPEX_mpz_mul(tmpz, v->x[p],
        -:  138:                                    SPEX_MPQ_NUM(pending_scale)));
    #####:  139:            SPEX_CHECK(SPEX_mpz_fdiv_q(tmpz, tmpz,
        -:  140:                                    SPEX_MPQ_DEN(pending_scale)));
        -:  141:            // x[i] = x[i]- tmpz
    #####:  142:            SPEX_CHECK(SPEX_mpz_sub(sv_x->x[i], sv_x->x[i], tmpz));
        -:  143:        }
        -:  144:        else
        -:  145:        {
    #####:  146:            SPEX_CHECK(SPEX_mpz_addmul(sv_x->x[i], v->x[p], sv_x->x[perm[j]]));
    #####:  147:            if (real_hi > -1)
        -:  148:            {
    #####:  149:                SPEX_CHECK(SPEX_mpz_divexact(sv_x->x[i],
        -:  150:                                             sv_x->x[i], sd[real_hi]));
        -:  151:            }
        -:  152:        }
        -:  153:
        -:  154:        // update h[i] and last_nz_b4_ks
    #####:  155:        h[i] = SPEX_FLIP(j);
        -:  156:    }
        -:  157:
        -:  158:    // x(perm(j)) = x[perm[j]]*x_scale*history_update
    #####:  159:    if (j-1 > real_hj) // require history update
        -:  160:    {
    #####:  161:        SPEX_CHECK(SPEX_mpz_mul(sv_x->x[perm[j]], sv_x->x[perm[j]], sd[j-1]));
    #####:  162:        if (real_hj > -1)
        -:  163:        {
    #####:  164:            SPEX_CHECK(SPEX_mpz_divexact(sv_x->x[perm[j]],
        -:  165:                                         sv_x->x[perm[j]], sd[real_hj]));
        -:  166:        }
        -:  167:    }
    #####:  168:    SPEX_CHECK(SPEX_mpz_divexact(sv_x->x[perm[j]],
        -:  169:                            sv_x->x[perm[j]], SPEX_MPQ_DEN(x_scale)));
    #####:  170:    SPEX_CHECK(SPEX_mpz_mul(sv_x->x[perm[j]],
        -:  171:                            sv_x->x[perm[j]], SPEX_MPQ_NUM(x_scale)));
        -:  172:
        -:  173:    // update scaling for x, since the scaling for v is skipped
        -:  174:    // x_scale=x_scale*v_scale1*v_scale2.
    #####:  175:    SPEX_CHECK(SPEX_mpq_mul(x_scale, x_scale, v_scale1));
    #####:  176:    SPEX_CHECK(SPEX_mpq_mul(x_scale, x_scale, v_scale2));
        -:  177:
    #####:  178:    SPEX_FREE_ALL;
    #####:  179:    return SPEX_OK;
        -:  180:}
