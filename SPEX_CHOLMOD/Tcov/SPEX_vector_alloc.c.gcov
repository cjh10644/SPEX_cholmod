        -:    0:Source:SPEX_vector_alloc.c
        -:    0:Graph:SPEX_vector_alloc.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    1://------------------------------------------------------------------------------
        -:    2:// SPEX_CHOLMOD/SPEX_vector_alloc.c: create and initialize a vector with given
        -:    3:// size nzmax.
        -:    4://------------------------------------------------------------------------------
        -:    5:
        -:    6:// SPEX_CHOLMOD: (c) 2020-2021, Jinhao Chen, Timothy A. Davis, Erick
        -:    7:// Moreno-Centeno, Texas A&M University.  All Rights Reserved.  See
        -:    8:// SPEX_CHOLMOD/License for the license.
        -:    9:
        -:   10://------------------------------------------------------------------------------
        -:   11:
        -:   12:// Purpose: This function is called to create and initialize a mpz vector with
        -:   13:// given size nzmax. Both mpz_t vector and the nnz pattern vector i are
        -:   14:// allocated with length nzmax.
        -:   15:
        -:   16:#include "spex_internal.h"
        -:   17:
    #####:   18:SPEX_info SPEX_vector_alloc
        -:   19:(
        -:   20:    SPEX_vector **v_handle,         // vector to be allocated
        -:   21:    const int64_t nzmax             // number of nnz entries in v
        -:   22:)
        -:   23:{
    #####:   24:    if (!spex_initialized()) return (SPEX_PANIC);
    #####:   25:    if (v_handle == NULL || nzmax < 0)
        -:   26:    {
    #####:   27:        return SPEX_INCORRECT_INPUT;
        -:   28:    }
    #####:   29:    *v_handle = NULL;
        -:   30:
    #####:   31:    SPEX_vector *v = (SPEX_vector*) SPEX_malloc(sizeof(SPEX_vector));
    #####:   32:    if (!v)
        -:   33:    {
    #####:   34:        return SPEX_OUT_OF_MEMORY;
        -:   35:    }
        -:   36:
    #####:   37:    v->x = NULL;
    #####:   38:    v->i = NULL;
    #####:   39:    v->nzmax = nzmax;
    #####:   40:    v->nz = 0;
    #####:   41:    if (nzmax == 0)
        -:   42:    {
    #####:   43:        *v_handle = v;
    #####:   44:        return SPEX_OK;
        -:   45:    }
        -:   46:
    #####:   47:    v->x = spex_create_mpz_array(nzmax);
    #####:   48:    if (!(v->x))
        -:   49:    {
    #####:   50:        SPEX_FREE(v);
    #####:   51:        return SPEX_OUT_OF_MEMORY;
        -:   52:    }
    #####:   53:    v->i = (int64_t*) SPEX_malloc(nzmax*sizeof(int64_t));
    #####:   54:    if (!(v->i))
        -:   55:    {
    #####:   56:        spex_delete_mpz_array(&(v->x), nzmax);
    #####:   57:        SPEX_FREE(v);
    #####:   58:        return SPEX_OUT_OF_MEMORY;
        -:   59:    }
        -:   60:
    #####:   61:    *v_handle = v;
        -:   62:
    #####:   63:    return SPEX_OK;
        -:   64:}
        -:   65:
